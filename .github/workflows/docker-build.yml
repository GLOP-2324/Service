name: CI/CD

on:
  workflow_run:
    workflows: [ "create-branch" ]
    types:
      - completed
  push:
    branches:
      - "*"
env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  IP_BE_ADDRESS: ${{ secrets.IP_BE_ADDRESS }}

jobs:
  test:
    name: test and analyse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=GLOP-2324_Service
  build:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - #Set the production profile
        name: Set production profile
        run: |
          sed -i 's/spring.profiles.active=dev/spring.profiles.active=prod/g' ./src/main/resources/application.properties

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/glop23-24:backend
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Install OpenVPN Client
        run: sudo apt-get update && sudo apt-get install openvpn

      - name: Download VPN Configuration
        run: |
          wget https://infotuto.univ-lille.fr/fileadmin/user_upload/infotuto/images/DSI/Fichiers_telechargeables/Clients_VPN/ULILLE_VPN_ETUDIANT_Linux_v4.zip
          unzip ULILLE_VPN_ETUDIANT_Linux_v4.zip
          
      - name: OpenVPN-Connect
        uses: kota65535/github-openvpn-connect-action@v2.1.0
        with:
          config_file: ULILLE_VPN_ETU_TCP_v4_Linux.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Checkout code
        uses: actions/checkout@v2

      # Login to docker hub.
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set permissions for private key
        run:
          chmod 600 shoploc.pem

      - name: Stop and Remove Existing Container
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker stop backend-container || true'
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker rm backend-container || true'

      # Deploy shoploc-be on OpenStack instance.
      - name: Pull shoploc-be docker image
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker pull ${{ secrets.DOCKER_USERNAME }}/glop23-24:backend'
      - name: Run new shoploc-be-container
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker run -d --name backend-container -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/glop23-24:backend'
      #Delete unused images
      - name: Delete unused images
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker image prune -af '
    
